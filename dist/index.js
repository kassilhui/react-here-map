!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("react"),require("prop-types")):"function"==typeof define&&define.amd?define(["exports","react","prop-types"],t):t((e=e||self).reactHereMap={},e.React,e.PropTypes)}(this,(function(e,t,r){"use strict";var n="default"in t?t.default:t;function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){s(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function u(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function s(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function c(e){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function l(e,t){return(l=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function f(e,t){if(t&&("object"==typeof t||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function p(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=c(e);if(t){var o=c(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return f(this,r)}}function d(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==r)return;var n,o,i=[],a=!0,u=!1;try{for(r=r.call(e);!(a=(n=r.next()).done)&&(i.push(n.value),!t||i.length!==t);a=!0);}catch(e){u=!0,o=e}finally{try{a||null==r.return||r.return()}finally{if(u)throw o}}return i}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return m(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return m(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function m(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}r=r&&Object.prototype.hasOwnProperty.call(r,"default")?r.default:r;var h="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function y(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function v(e,t){return e(t={exports:{}},t.exports),t.exports}var b=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});t.isArray=function(e){return"[object Array]"===Object.prototype.toString.call(e)},t.isString=function(e){return"string"==typeof e},t.isFunction=function(e){return"function"==typeof e}}));y(b);b.isArray,b.isString,b.isFunction;var g=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var r={};t.default=function e(t,n){if((0,b.isString)(t))return new Promise((function(e,n){!function(e,t,n){var o=function(){r[e]=!0,(0,b.isFunction)(t)&&t()};if(r[e])o();else{var i=document.createElement("script");i.type="text/javascript",i.readyState?i.onreadystatechange=function(){"loaded"!=i.readyState&&"complete"!=i.readyState||(i.onreadystatechange=null,o())}:i.onload=function(){o()},i.onerror=function(t){r[e]=!1,console.log("error",t),(0,b.isFunction)(n)&&n()},i.src=e,(document.body||document.head||document).appendChild(i)}}(t,(function(){return e(!0)}),(function(){return n()}))}));if((0,b.isArray)(t)){var o=Promise.resolve(!0);return t.forEach((function(t){o=o.then((function(){return e(t)}))})),o}throw new Error("Invalid argument for get()")}}));y(g);var w=g.default,j={VERSION:"v3/3.0",interactive:!1,includeUI:!1,includePlaces:!1},O=v((function(e){!function(t){var r=function(e){return o(!0===e,!1,arguments)};function n(e,t){if("object"!==i(e))return t;for(var r in t)"object"===i(e[r])&&"object"===i(t[r])?e[r]=n(e[r],t[r]):e[r]=t[r];return e}function o(e,t,o){var a=o[0],u=o.length;(e||"object"!==i(a))&&(a={});for(var s=0;s<u;++s){var c=o[s];if("object"===i(c))for(var l in c)if("__proto__"!==l){var f=e?r.clone(c[l]):c[l];a[l]=t?n(a[l],f):f}}return a}function i(e){return{}.toString.call(e).slice(8,-1).toLowerCase()}r.recursive=function(e){return o(!0===e,!0,arguments)},r.clone=function(e){var t,n,o=e,a=i(e);if("array"===a)for(o=[],n=e.length,t=0;t<n;++t)o[t]=r.clone(e[t]);else if("object"===a)for(t in o={},e)o[t]=r.clone(e[t]);return o},t?e.exports=r:window.merge=r}(e&&e.exports)}));const _=e=>{const t=(e=>O(j,e))(e||{}),{VERSION:r,version:n,interactive:o,includeUI:i,includePlaces:a}=t,u=n||r,s=((e=j.VERSION)=>[`https://js.api.here.com/${e}/mapsjs-service.js`,`https://js.api.here.com/${e}/mapsjs-ui.js`,`https://js.api.here.com/${e}/mapsjs-mapevents.js`,`https://js.api.here.com/${e}/mapsjs-places.js`])(u);!o&&s.splice(2,1),!i&&s.splice(1,1),!a&&s.splice(3,1);return w(`https://js.api.here.com/${u}/mapsjs-core.js`).then((function(){if(i){const e=document.createElement("link");e.setAttribute("rel","stylesheet"),e.setAttribute("type","text/css"),e.setAttribute("href",`https://js.api.here.com/${u}/mapsjs-ui.css`),document.getElementsByTagName("head")[0].append(e)}return w(s)})).catch(e=>{console.log(e)})};var k={normal:["xbase","xbasenight","base","basenight","map","mapnight","traffic","trafficnight","transit","panorama","panoramanight","labels","metaInfo"],satellite:["xbase","base","map","traffic","panorama","labels"],terrain:["xbase","base","map","traffic","panorama","labels"],incidents:!0,venues:!0},x=function(){},E={};["pointerdown","pointerup","pointermove","pointerenter","pointerleave","pointercancel","dragstart","drag","dragend","tab","dbltap"].map((function(e){return E[e]=x}));var S={VERSION:"v3/3.0",mapTypes:k,mapEvents:E,MAP_TYPE:"normal.map",mapOptions:{zoom:8,center:{lat:6.5243793,lng:3.3792057}},interactive:!1,includeUI:!1,includePlaces:!1,useEvents:!1,containerId:"HERE_MAP_CONTAINER",defaultClassName:"here-map-container"},P=v((function(e,t){var r=/^\[object .+?Constructor\]$/,n=/^(?:0|[1-9]\d*)$/,o={};o["[object Float32Array]"]=o["[object Float64Array]"]=o["[object Int8Array]"]=o["[object Int16Array]"]=o["[object Int32Array]"]=o["[object Uint8Array]"]=o["[object Uint8ClampedArray]"]=o["[object Uint16Array]"]=o["[object Uint32Array]"]=!0,o["[object Arguments]"]=o["[object Array]"]=o["[object ArrayBuffer]"]=o["[object Boolean]"]=o["[object DataView]"]=o["[object Date]"]=o["[object Error]"]=o["[object Function]"]=o["[object Map]"]=o["[object Number]"]=o["[object Object]"]=o["[object RegExp]"]=o["[object Set]"]=o["[object String]"]=o["[object WeakMap]"]=!1;var i="object"==typeof h&&h&&h.Object===Object&&h,a="object"==typeof self&&self&&self.Object===Object&&self,u=i||a||Function("return this")(),s=t&&!t.nodeType&&t,c=s&&e&&!e.nodeType&&e,l=c&&c.exports===s,f=l&&i.process,p=function(){try{var e=c&&c.require&&c.require("util").types;return e||f&&f.binding&&f.binding("util")}catch(e){}}(),d=p&&p.isTypedArray;function m(e,t,r){switch(r.length){case 0:return e.call(t);case 1:return e.call(t,r[0]);case 2:return e.call(t,r[0],r[1]);case 3:return e.call(t,r[0],r[1],r[2])}return e.apply(t,r)}var y,v,b,g=Array.prototype,w=Function.prototype,j=Object.prototype,O=u["__core-js_shared__"],_=w.toString,k=j.hasOwnProperty,x=(y=/[^.]+$/.exec(O&&O.keys&&O.keys.IE_PROTO||""))?"Symbol(src)_1."+y:"",E=j.toString,S=_.call(Object),P=RegExp("^"+_.call(k).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),M=l?u.Buffer:void 0,C=u.Symbol,A=u.Uint8Array,T=M?M.allocUnsafe:void 0,N=(v=Object.getPrototypeOf,b=Object,function(e){return v(b(e))}),R=Object.create,H=j.propertyIsEnumerable,z=g.splice,I=C?C.toStringTag:void 0,B=function(){try{var e=ce(Object,"defineProperty");return e({},"",{}),e}catch(e){}}(),D=M?M.isBuffer:void 0,L=Math.max,W=Date.now,F=ce(u,"Map"),V=ce(Object,"create"),q=function(){function e(){}return function(t){if(!je(t))return{};if(R)return R(t);e.prototype=t;var r=new e;return e.prototype=void 0,r}}();function U(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}function $(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}function G(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}function Y(e){var t=this.__data__=new $(e);this.size=t.size}function Z(e,t){var r=ye(e),n=!r&&he(e),o=!r&&!n&&be(e),i=!r&&!n&&!o&&_e(e),a=r||n||o||i,u=a?function(e,t){for(var r=-1,n=Array(e);++r<e;)n[r]=t(r);return n}(e.length,String):[],s=u.length;for(var c in e)!t&&!k.call(e,c)||a&&("length"==c||o&&("offset"==c||"parent"==c)||i&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||le(c,s))||u.push(c);return u}function X(e,t,r){(void 0!==r&&!me(e[t],r)||void 0===r&&!(t in e))&&Q(e,t,r)}function J(e,t,r){var n=e[t];k.call(e,t)&&me(n,r)&&(void 0!==r||t in e)||Q(e,t,r)}function K(e,t){for(var r=e.length;r--;)if(me(e[r][0],t))return r;return-1}function Q(e,t,r){"__proto__"==t&&B?B(e,t,{configurable:!0,enumerable:!0,value:r,writable:!0}):e[t]=r}U.prototype.clear=function(){this.__data__=V?V(null):{},this.size=0},U.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},U.prototype.get=function(e){var t=this.__data__;if(V){var r=t[e];return"__lodash_hash_undefined__"===r?void 0:r}return k.call(t,e)?t[e]:void 0},U.prototype.has=function(e){var t=this.__data__;return V?void 0!==t[e]:k.call(t,e)},U.prototype.set=function(e,t){var r=this.__data__;return this.size+=this.has(e)?0:1,r[e]=V&&void 0===t?"__lodash_hash_undefined__":t,this},$.prototype.clear=function(){this.__data__=[],this.size=0},$.prototype.delete=function(e){var t=this.__data__,r=K(t,e);return!(r<0)&&(r==t.length-1?t.pop():z.call(t,r,1),--this.size,!0)},$.prototype.get=function(e){var t=this.__data__,r=K(t,e);return r<0?void 0:t[r][1]},$.prototype.has=function(e){return K(this.__data__,e)>-1},$.prototype.set=function(e,t){var r=this.__data__,n=K(r,e);return n<0?(++this.size,r.push([e,t])):r[n][1]=t,this},G.prototype.clear=function(){this.size=0,this.__data__={hash:new U,map:new(F||$),string:new U}},G.prototype.delete=function(e){var t=se(this,e).delete(e);return this.size-=t?1:0,t},G.prototype.get=function(e){return se(this,e).get(e)},G.prototype.has=function(e){return se(this,e).has(e)},G.prototype.set=function(e,t){var r=se(this,e),n=r.size;return r.set(e,t),this.size+=r.size==n?0:1,this},Y.prototype.clear=function(){this.__data__=new $,this.size=0},Y.prototype.delete=function(e){var t=this.__data__,r=t.delete(e);return this.size=t.size,r},Y.prototype.get=function(e){return this.__data__.get(e)},Y.prototype.has=function(e){return this.__data__.has(e)},Y.prototype.set=function(e,t){var r=this.__data__;if(r instanceof $){var n=r.__data__;if(!F||n.length<199)return n.push([e,t]),this.size=++r.size,this;r=this.__data__=new G(n)}return r.set(e,t),this.size=r.size,this};var ee,te=function(e,t,r){for(var n=-1,o=Object(e),i=r(e),a=i.length;a--;){var u=i[ee?a:++n];if(!1===t(o[u],u,o))break}return e};function re(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":I&&I in Object(e)?function(e){var t=k.call(e,I),r=e[I];try{e[I]=void 0;var n=!0}catch(e){}var o=E.call(e);n&&(t?e[I]=r:delete e[I]);return o}(e):function(e){return E.call(e)}(e)}function ne(e){return Oe(e)&&"[object Arguments]"==re(e)}function oe(e){return!(!je(e)||function(e){return!!x&&x in e}(e))&&(ge(e)?P:r).test(function(e){if(null!=e){try{return _.call(e)}catch(e){}try{return e+""}catch(e){}}return""}(e))}function ie(e){if(!je(e))return function(e){var t=[];if(null!=e)for(var r in Object(e))t.push(r);return t}(e);var t=fe(e),r=[];for(var n in e)("constructor"!=n||!t&&k.call(e,n))&&r.push(n);return r}function ae(e,t,r,n,o){e!==t&&te(t,(function(i,a){if(o||(o=new Y),je(i))!function(e,t,r,n,o,i,a){var u=pe(e,r),s=pe(t,r),c=a.get(s);if(c)return void X(e,r,c);var l=i?i(u,s,r+"",e,t,a):void 0,f=void 0===l;if(f){var p=ye(s),d=!p&&be(s),m=!p&&!d&&_e(s);l=s,p||d||m?ye(u)?l=u:Oe(g=u)&&ve(g)?l=function(e,t){var r=-1,n=e.length;t||(t=Array(n));for(;++r<n;)t[r]=e[r];return t}(u):d?(f=!1,l=function(e,t){if(t)return e.slice();var r=e.length,n=T?T(r):new e.constructor(r);return e.copy(n),n}(s,!0)):m?(f=!1,h=s,y=!0?(v=h.buffer,b=new v.constructor(v.byteLength),new A(b).set(new A(v)),b):h.buffer,l=new h.constructor(y,h.byteOffset,h.length)):l=[]:function(e){if(!Oe(e)||"[object Object]"!=re(e))return!1;var t=N(e);if(null===t)return!0;var r=k.call(t,"constructor")&&t.constructor;return"function"==typeof r&&r instanceof r&&_.call(r)==S}(s)||he(s)?(l=u,he(u)?l=function(e){return function(e,t,r,n){var o=!r;r||(r={});var i=-1,a=t.length;for(;++i<a;){var u=t[i],s=n?n(r[u],e[u],u,r,e):void 0;void 0===s&&(s=e[u]),o?Q(r,u,s):J(r,u,s)}return r}(e,ke(e))}(u):je(u)&&!ge(u)||(l=function(e){return"function"!=typeof e.constructor||fe(e)?{}:q(N(e))}(s))):f=!1}var h,y,v,b;var g;f&&(a.set(s,l),o(l,s,n,i,a),a.delete(s));X(e,r,l)}(e,t,a,r,ae,n,o);else{var u=n?n(pe(e,a),i,a+"",e,t,o):void 0;void 0===u&&(u=i),X(e,a,u)}}),ke)}function ue(e,t){return de(function(e,t,r){return t=L(void 0===t?e.length-1:t,0),function(){for(var n=arguments,o=-1,i=L(n.length-t,0),a=Array(i);++o<i;)a[o]=n[t+o];o=-1;for(var u=Array(t+1);++o<t;)u[o]=n[o];return u[t]=r(a),m(e,this,u)}}(e,t,Se),e+"")}function se(e,t){var r,n,o=e.__data__;return("string"==(n=typeof(r=t))||"number"==n||"symbol"==n||"boolean"==n?"__proto__"!==r:null===r)?o["string"==typeof t?"string":"hash"]:o.map}function ce(e,t){var r=function(e,t){return null==e?void 0:e[t]}(e,t);return oe(r)?r:void 0}function le(e,t){var r=typeof e;return!!(t=null==t?9007199254740991:t)&&("number"==r||"symbol"!=r&&n.test(e))&&e>-1&&e%1==0&&e<t}function fe(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||j)}function pe(e,t){if(("constructor"!==t||"function"!=typeof e[t])&&"__proto__"!=t)return e[t]}var de=function(e){var t=0,r=0;return function(){var n=W(),o=16-(n-r);if(r=n,o>0){if(++t>=800)return arguments[0]}else t=0;return e.apply(void 0,arguments)}}(B?function(e,t){return B(e,"toString",{configurable:!0,enumerable:!1,value:(r=t,function(){return r}),writable:!0});var r}:Se);function me(e,t){return e===t||e!=e&&t!=t}var he=ne(function(){return arguments}())?ne:function(e){return Oe(e)&&k.call(e,"callee")&&!H.call(e,"callee")},ye=Array.isArray;function ve(e){return null!=e&&we(e.length)&&!ge(e)}var be=D||function(){return!1};function ge(e){if(!je(e))return!1;var t=re(e);return"[object Function]"==t||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t}function we(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991}function je(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}function Oe(e){return null!=e&&"object"==typeof e}var _e=d?function(e){return function(t){return e(t)}}(d):function(e){return Oe(e)&&we(e.length)&&!!o[re(e)]};function ke(e){return ve(e)?Z(e,!0):ie(e)}var xe,Ee=(xe=function(e,t,r){ae(e,t,r)},ue((function(e,t){var r=-1,n=t.length,o=n>1?t[n-1]:void 0,i=n>2?t[2]:void 0;for(o=xe.length>3&&"function"==typeof o?(n--,o):void 0,i&&function(e,t,r){if(!je(r))return!1;var n=typeof t;return!!("number"==n?ve(r)&&le(t,r.length):"string"==n&&t in r)&&me(r[t],e)}(t[0],t[1],i)&&(o=n<3?void 0:o,n=1),e=Object(e);++r<n;){var a=t[r];a&&xe(e,a,r,o)}return e})));function Se(e){return e}e.exports=Ee})),M=function(e){var t=function(e){return P(S,e)}(e||{}),r=t.VERSION,n=t.version,o=t.interactive,i=t.includeUI,a=t.includePlaces;return _({includeUI:i,includePlaces:a,interactive:o,version:n||r}).then((function(){return t}))};var C=function(e){var t=typeof e;return null!==e&&("object"===t||"function"===t)};function A(e){for(var t=e.split("."),r=[],n=0;n<t.length;n++){for(var o=t[n];"\\"===o[o.length-1]&&void 0!==t[n+1];)o=o.slice(0,-1)+".",o+=t[++n];r.push(o)}return r}var T=function(e,t){if(!C(e)||"string"!=typeof t)return e;for(var r=A(t),n=0;n<r.length;n++){var o=Object.getOwnPropertyDescriptor(e,r[n])||Object.getOwnPropertyDescriptor(Object.prototype,r[n]);if(o&&!o.enumerable)return;if(null==(e=e[r[n]])){if(n!==r.length-1)return;break}}return e},N=function(e,t){var r=t.split("."),n=e[r[0]];if(!(Array.isArray(n)&&n.includes(r[1]))&&!(!0===n))throw new Error("mapType Should be one from https://developer.here.com/documentation/maps/topics/map-types.html in dot notation")},R=function(e,t,r,n,o){N(n,o);var i=e.createDefaultLayers();return new H.Map(t,T(i,o),r)},z=function(e,t,r,n){var o=t?new H.mapevents.Behavior(new H.mapevents.MapEvents(e)):null;if(r&&t)for(var i in n)n.hasOwnProperty(i)&&function(){var t=n[i];t&&"function"==typeof t&&e.addEventListener(i,(function(e){t.apply(null,arguments)}))}();return o},I=function(e,t,r,n){if(!r)throw new Error("includeUI must be set to true to initialize default UI");return H.ui.UI.createDefault(t,e.createDefaultLayers(),n)},B=function(){var e=document.createElement("style"),t=".grab = {cursor: move;cursor: grab;cursor: -moz-grab;cursor: -webkit-grab;}.grabbing{cursor:grabbing;cursor:-moz-grabbing;cursor:-webkit-grabbing}";e.type="text/css",e.styleSheet?e.styleSheet.cssText=t:e.appendChild(document.createTextNode(t)),(document.head||document.getElementsByTagName("head")[0]).appendChild(e)},D=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");Object.defineProperty(e,"prototype",{value:Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),writable:!1}),t&&l(e,t)}(c,e);var t,r,o,s=p(c);function c(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c),(t=s.call(this,e)).container=n.createRef(),t.state={builder:{}},t}return t=c,(r=[{key:"componentDidMount",value:function(){var e=this.props,t=P({container:this.container.current,build:!0},e.options,e);delete t.options;var r=function(e,t){var r=t.useEvents,n=t.mapEvents,o=t.interactive,a=t.includeUI,u=t.mapType,s=t.MAP_TYPE,c=t.mapTypes,l=t.mapOptions,f=t.uiLang,p=t.container,d=t.build,m=u||s,h={options:i(i({},t),{},{MAP_TYPE:m}),platform:e};return p&&d?(h.map=R(e,p,l,c,m),h.interaction=z(h.map,o,r,n),a&&(h.ui=I(e,h.map,a,f)),B()):(h.createMap=R,h.createPlatform=initPlatform,h.createInteraction=z,h.createDefaultUI=I,h.createInteractionStyles=B),h}(e.platform,t);this.setState({builder:r})}},{key:"createLoadingComponent",value:function(){return n.createElement("div",null,"Loading")}},{key:"displayChildren",value:function(){var e=this.props.children,t=this.state.builder,r=t.map,o=t.platform,i=t.ui,a=t.options;return n.Children.map(e,(function(e){return n.cloneElement(e,{map:r,platform:o,ui:i,__options:a})}))}},{key:"cleanMapObjects",value:function(){var e=this.state.builder.map;e.removeObjects(e.getObjects())}},{key:"getPositionByXandY",value:function(e,t){return this.state.builder.map.screenToGeo(e,t)}},{key:"render",value:function(){var e=this.props,t=e.style,r=e.loadingEl,o=this.state.builder.options,i=r||this.createLoadingComponent();return n.createElement("div",{id:S.containerId,className:S.defaultClassName,style:t,ref:this.container},"undefined"==typeof H&&!o&&i,"object"===("undefined"==typeof H?"undefined":a(H))&&o&&this.displayChildren())}}])&&u(t.prototype,r),o&&u(t,o),Object.defineProperty(t,"prototype",{writable:!1}),c}(n.Component);D.propTypes={version:r.string,mapType:r.string,useEvents:r.bool,interactive:r.bool,includeUI:r.bool,mapEvents:r.object,platform:r.object,options:r.object,mapOptions:r.object};var L=function(e,t,r){var n=r.useEvents,o=r.interactive,i=r.mapEvents;if(n&&o&&t)for(var a in i)i.hasOwnProperty(a)&&function(){var r=t[a];r&&"function"==typeof r&&e.addEventListener(a,(function(e){r.apply(null,arguments)}))}()};function W(e){var t=P({setViewBounds:!0},e),r=t.points,o=t.options,i=t.map,a=t.setViewBounds,u=t.objectEvents,s=(t.platform,t.ui,t.__options);if(!H||!H.map||!i)throw new Error("HMap has to be initialized before adding Map Objects");if(!Array.isArray(r))throw new Error("points should be an array of objects containing lat and lng properties");var c=new H.geo.LineString;r.forEach((function(e){c.pushPoint(e)}));var l=new H.map.Polyline(c,o);return L(l,u,s),i.addObject(l),a&&i.setViewBounds(l.getBounds()),n.createElement("div",{style:{display:"none"}})}function F(e){var t=P({setViewBounds:!0},e),r=t.points,o=t.map,i=t.setViewBounds,a=t.options,u=t.objectEvents,s=(t.platform,t.ui,t.__options);if(!H||!H.map||!o)throw new Error("HMap has to be initialized before adding Map Objects");if(!Array.isArray(r))throw new Error("points should be an array of number to use in drawing the points");var c={},l=r[0];"string"==typeof l&&2===l.split(",").length?(c=new H.geo.LineString,r.forEach((function(e){c.pushLatLngAlt.apply(c,e.split(","))}))):c=new H.geo.LineString(r,"values lat lng alt");var f=new H.map.Polygon(c,a);return L(f,u,s),o.addObject(f),i&&o.setViewBounds(f.getBounds()),n.createElement("div",{style:{display:"none"}})}function V(e){var t=P({setViewBounds:!0,updateMarker:!1,marker:null,getMarker:function(){}},e),r=t.icon,o=t.map,i=t.coords,a=t.type,u=t.options,s=t.setViewBounds,c=t.updateMarker,l=t.marker,f=t.getMarker,p=t.objectEvents,d=(t.platform,t.ui,t.__options),m=u;if(!H||!H.map||!o)throw new Error("HMap has to be initialized before adding Map Objects");if(!i.lat||!i.lng)throw new Error("coords should be an object having 'lat' and 'lng' as props");a&&"DOM"===a?m.icon=new H.map.DomIcon(r):a&&(m.icon=new H.map.Icon(r));var h=c&&l?l:new H.map.Marker(i,m);return o.getObjects().some((function(e){if("function"==typeof e.getPosition){var t=e.getPosition(),r=t.lat,n=t.lng;return r===i.lat&&i.lng===n}}))||c?c&&h.setPosition(i):(L(h,p,d),o.addObject(h)),!l&&f(h),s&&o.setCenter(i),n.createElement("div",{style:{display:"none"}})}function q(e){var t=P({setViewBounds:!0},e),r=t.radius,o=t.map,i=t.coords,a=t.options,u=t.setViewBounds,s=t.objectEvents,c=(t.platform,t.ui,t.__options);if(!H||!H.map||!o)throw new Error("HMap has to be initialized before adding Map Objects");if(!i.lat||!i.lng)throw new Error("coords should be an object having 'lat' and 'lng' as props");r||console.info("radius is not set, default radius of 1000 is used");var l=new H.map.Circle(i,r||1e3,a);return L(l,s,c),o.addObject(l),u&&o.setCenter(i),n.createElement("div",{style:{display:"none"}})}function U(e){var t=P({setViewBounds:!0},e),r=t.map,o=t.points,i=t.options,a=t.setViewBounds,u=t.objectEvents,s=(t.platform,t.ui,t.__options);if(!H||!H.map||!r)throw new Error("HMap has to be initialized before adding Map Objects");if(!o||4!==o.length)throw new Error("points should be an array of four items");var c=new H.geo.Rect(o[0],o[1],o[2],o[3]),l=new H.map.Rect(c,i);return L(l,u,s),r.addObject(l),a&&r.setViewBounds(l.getBounds()),n.createElement("div",{style:{display:"none"}})}function $(e){var r=e.geoCodeParams,o=e.platform,i=e.map,a=e.ui,u=e.children,s=e.reverse,c=e.landmark;if(!H||!H.map||!i)throw new Error("HMap has to be initialized before adding Map Objects");if(!r)throw new Error("geoCodeParams is not set");var l=d(t.useState([]),2),f=l[0],p=l[1],m=function(e){p(e.Response.View[0].Result)},h=o.getGeocodingService();return c?h.search(r,m,(function(e){alert(e)})):s?h.reverseGeocode(r,m,(function(e){return console.log(e)})):h.geocode(r,m,(function(e){return console.log(e)})),f.length&&f.map((function(e){var t=e.Location||e.Place.Locations[0],r=t.DisplayPosition.Latitude,s=t.DisplayPosition.Longitude,c={map:i,platform:o,ui:a,lat:r,lng:s,key:r,location:e,_location:t};return n.cloneElement(u,c)}))}function G(e){var r=P({renderDefaultLine:!0},e),o=r.routeParams,i=r.platform,a=r.map,u=r.ui,s=r.children,c=r.renderDefaultLine,l=r.isoLine,f=r.lineOptions,p=r.polygonOptions,m=r.markerOptions,h=r.icon;if(!H||!H.map||!a)throw new Error("HMap has to be initialized before adding Map Objects");if(!o)throw new Error("routeParams is not set");var y,v=d(t.useState([]),2),b=v[0],g=(v[1],d(t.useState({}),2)),w=g[0],j=(g[1],d(t.useState({}),2)),O=j[0],_=(j[1],d(t.useState({}),2)),k=(_[0],_[1],d(t.useState({}),2)),x=k[0],E=(k[1],i.getRoutingService(),function(){return l?n.createElement(n.Fragment,null,n.createElement(F,{points:b,options:p,setViewBounds:!0,map:a,platform:i}),n.createElement(V,{coords:x,map:a,platform:i,icon:h,options:m,setViewBounds:!1})):(e=w.waypoint[0].mappedPosition,t=w.waypoint[1].mappedPosition,r={lat:e.latitude,lng:e.longitude},o={lat:t.latitude,lng:t.longitude},n.createElement(n.Fragment,null,n.createElement(W,{points:b,map:a,options:f,setViewBounds:!0}),n.createElement(V,{coords:r,map:a,platform:i,icon:h,options:m,setViewBounds:!1}),n.createElement(V,{coords:o,map:a,platform:i,icon:h,options:m,setViewBounds:!1})));var e,t,r,o});return(w.waypoint||O.shape)&&b.length?c?E():(y={map:a,platform:i,ui:u,route:w,routeShape:b,center:x,component:O},n.cloneElement(s,y)):null}function Y(e){var t=e.platform,r=e.map,n=e.mapLayerType,o=e.__options.mapTypes;if(!H||!H.map||!r)throw new Error("HMap has to be initialized before adding Map Objects");N(o,n);var i=t.createDefaultLayers();return r.addLayer(T(i,n)),null}W.propTypes={points:r.array.isRequired,options:r.object,map:r.object,setViewBounds:r.bool,objectEvents:r.object},F.propTypes={points:r.array.isRequired,options:r.object,map:r.object,setViewBounds:r.bool,objectEvents:r.object},V.propTypes={coords:r.object.isRequired,icon:r.any,options:r.object,type:r.string,setViewBounds:r.bool,map:r.object,objectEvents:r.object},q.propTypes={coords:r.object.isRequired,options:r.object,radius:r.number,setViewBounds:r.bool,map:r.object,objectEvents:r.object},U.propTypes={options:r.object,points:r.array.isRequired,map:r.object,objectEvents:r.object},$.propTypes={geoCodeParams:r.object,children:r.element.isRequired,reverse:r.bool,landmark:r.bool,map:r.object,platform:r.object,ui:r.object},G.propTypes={routeParams:r.object,lineOptions:r.object,markerOptions:r.object,children:r.element,renderDefaultLine:r.bool,isoLine:r.bool,icon:r.any,map:r.object,platform:r.object,ui:r.object},Y.propTypes={platform:r.object,__options:r.object,mapLayerType:r.string.isRequired,map:r.object};var Z=/^\s+|\s+$/g,X=/^[-+]0x[0-9a-f]+$/i,J=/^0b[01]+$/i,K=/^0o[0-7]+$/i,Q=parseInt,ee="object"==typeof h&&h&&h.Object===Object&&h,te="object"==typeof self&&self&&self.Object===Object&&self,re=ee||te||Function("return this")(),ne=Object.prototype.toString,oe=Math.max,ie=Math.min,ae=function(){return re.Date.now()};function ue(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function se(e){if("number"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&"[object Symbol]"==ne.call(e)}(e))return NaN;if(ue(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=ue(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(Z,"");var r=J.test(e);return r||K.test(e)?Q(e.slice(2),r?2:8):X.test(e)?NaN:+e}var ce=function(e,t,r){var n,o,i,a,u,s,c=0,l=!1,f=!1,p=!0;if("function"!=typeof e)throw new TypeError("Expected a function");function d(t){var r=n,i=o;return n=o=void 0,c=t,a=e.apply(i,r)}function m(e){return c=e,u=setTimeout(y,t),l?d(e):a}function h(e){var r=e-s;return void 0===s||r>=t||r<0||f&&e-c>=i}function y(){var e=ae();if(h(e))return v(e);u=setTimeout(y,function(e){var r=t-(e-s);return f?ie(r,i-(e-c)):r}(e))}function v(e){return u=void 0,p&&n?d(e):(n=o=void 0,a)}function b(){var e=ae(),r=h(e);if(n=arguments,o=this,s=e,r){if(void 0===u)return m(s);if(f)return u=setTimeout(y,t),d(s)}return void 0===u&&(u=setTimeout(y,t)),a}return t=se(t)||0,ue(r)&&(l=!!r.leading,i=(f="maxWait"in r)?oe(se(r.maxWait)||0,t):i,p="trailing"in r?!!r.trailing:p),b.cancel=function(){void 0!==u&&clearTimeout(u),c=0,n=s=o=u=void 0},b.flush=function(){return void 0===u?a:v(ae())},b}((function(e,t){return t(e)}),500),le={margin:0,fontFamily:"inherit",display:"block",width:"100%",padding:".375rem .75rem",fontSize:"1rem",lineHeight:1.5,color:"#495057",backgroundColor:"#fff",backgroundClip:"padding-box",border:"1px solid #ced4da",borderRadius:".25rem",transition:"border-color .15s ease-in-out, box-shadow .15s ease-in-out"};function fe(e){var t=e.getValue,r=e.style,o=e.className;return r=P(le,r),n.createElement("input",{className:o,style:r,placeholder:"Enter a value",onChange:function(e){return ce(e.target.value,t)}})}ce.propTypes={getValue:r.func.isRequired,className:r.string,style:r.object};
/*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  */
var pe=Object.getOwnPropertySymbols,de=Object.prototype.hasOwnProperty,me=Object.prototype.propertyIsEnumerable;function he(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}var ye=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},r=0;r<10;r++)t["_"+String.fromCharCode(r)]=r;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var n={};return"abcdefghijklmnopqrst".split("").forEach((function(e){n[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},n)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var r,n,o=he(e),i=1;i<arguments.length;i++){for(var a in r=Object(arguments[i]))de.call(r,a)&&(o[a]=r[a]);if(pe){n=pe(r);for(var u=0;u<n.length;u++)me.call(r,n[u])&&(o[n[u]]=r[n[u]])}}return o},ve=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.StyleSheet=f;var r,n=(r=ye)&&r.__esModule?r:{default:r};function o(e){return e[e.length-1]}function i(e){if(e.sheet)return e.sheet;for(var t=0;t<document.styleSheets.length;t++)if(document.styleSheets[t].ownerNode===e)return document.styleSheets[t]}var a="undefined"!=typeof window,u="development"===process.env.NODE_ENV||!process.env.NODE_ENV,s="test"===process.env.NODE_ENV,c=function(){if(a){var e=document.createElement("div");return e.innerHTML="\x3c!--[if lt IE 10]><i></i><![endif]--\x3e",1===e.getElementsByTagName("i").length}}();function l(){var e=document.createElement("style");return e.type="text/css",e.setAttribute("data-glamor",""),e.appendChild(document.createTextNode("")),(document.head||document.getElementsByTagName("head")[0]).appendChild(e),e}function f(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.speedy,r=void 0===t?!u&&!s:t,n=e.maxLength,o=void 0===n?a&&c?4e3:65e3:n;this.isSpeedy=r,this.sheet=void 0,this.tags=[],this.maxLength=o,this.ctr=0}(0,n.default)(f.prototype,{getSheet:function(){return i(o(this.tags))},inject:function(){var e=this;if(this.injected)throw new Error("already injected stylesheet!");a?this.tags[0]=l():this.sheet={cssRules:[],insertRule:function(t){e.sheet.cssRules.push({cssText:t})}},this.injected=!0},speedy:function(e){if(0!==this.ctr)throw new Error("cannot change speedy mode after inserting any rule to sheet. Either call speedy("+e+") earlier in your app, or call flush() before speedy("+e+")");this.isSpeedy=!!e},_insert:function(e){try{var t=this.getSheet();t.insertRule(e,-1!==e.indexOf("@import")?0:t.cssRules.length)}catch(t){u&&console.warn("whoops, illegal rule inserted",e)}},insert:function(e){if(a)if(this.isSpeedy&&this.getSheet().insertRule)this._insert(e);else if(-1!==e.indexOf("@import")){var t=o(this.tags);t.insertBefore(document.createTextNode(e),t.firstChild)}else o(this.tags).appendChild(document.createTextNode(e));else this.sheet.insertRule(e,-1!==e.indexOf("@import")?0:this.sheet.cssRules.length);return this.ctr++,a&&this.ctr%this.maxLength==0&&this.tags.push(l()),this.ctr-1},delete:function(e){return this.replace(e,"")},flush:function(){a?(this.tags.forEach((function(e){return e.parentNode.removeChild(e)})),this.tags=[],this.sheet=null,this.ctr=0):this.sheet.cssRules=[],this.injected=!1},rules:function(){if(!a)return this.sheet.cssRules;var e=[];return this.tags.forEach((function(t){return e.splice.apply(e,[e.length,0].concat(function(e){if(Array.isArray(e)){for(var t=0,r=Array(e.length);t<e.length;t++)r[t]=e[t];return r}return Array.from(e)}(Array.from(i(t).cssRules))))})),e}})}));y(ve);ve.StyleSheet;var be=/-(.)/g;var ge=function(e){return e.replace(be,(function(e,t){return t.toUpperCase()}))},we=/^-ms-/;var je=function(e){return ge(e.replace(we,"ms-"))},Oe=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var r={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridRowStart:!0,gridRowEnd:!0,gridColumn:!0,gridColumnStart:!0,gridColumnEnd:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0};var n=["Webkit","ms","Moz","O"];Object.keys(r).forEach((function(e){n.forEach((function(t){r[function(e,t){return e+t.charAt(0).toUpperCase()+t.substring(1)}(t,e)]=r[e]}))}));var o={isUnitlessNumber:r,shorthandPropertyExpansions:{background:{backgroundAttachment:!0,backgroundColor:!0,backgroundImage:!0,backgroundPositionX:!0,backgroundPositionY:!0,backgroundRepeat:!0},backgroundPosition:{backgroundPositionX:!0,backgroundPositionY:!0},border:{borderWidth:!0,borderStyle:!0,borderColor:!0},borderBottom:{borderBottomWidth:!0,borderBottomStyle:!0,borderBottomColor:!0},borderLeft:{borderLeftWidth:!0,borderLeftStyle:!0,borderLeftColor:!0},borderRight:{borderRightWidth:!0,borderRightStyle:!0,borderRightColor:!0},borderTop:{borderTopWidth:!0,borderTopStyle:!0,borderTopColor:!0},font:{fontStyle:!0,fontVariant:!0,fontWeight:!0,fontSize:!0,lineHeight:!0,fontFamily:!0},outline:{outlineWidth:!0,outlineStyle:!0,outlineColor:!0}}};t.default=o}));function _e(e){return function(){return e}}y(Oe);var ke=function(){};ke.thatReturns=_e,ke.thatReturnsFalse=_e(!1),ke.thatReturnsTrue=_e(!0),ke.thatReturnsNull=_e(null),ke.thatReturnsThis=function(){return this},ke.thatReturnsArgument=function(e){return e};var xe=ke;if("production"!==process.env.NODE_ENV){var Ee=function(e){for(var t=arguments.length,r=Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];var o=0,i="Warning: "+e.replace(/%s/g,(function(){return r[o++]}));"undefined"!=typeof console&&console.error(i);try{throw new Error(i)}catch(e){}};xe=function(e,t){if(void 0===t)throw new Error("`warning(condition, format, ...args)` requires a warning message argument");if(0!==t.indexOf("Failed Composite propType: ")&&!e){for(var r=arguments.length,n=Array(r>2?r-2:0),o=2;o<r;o++)n[o-2]=arguments[o];Ee.apply(void 0,[t].concat(n))}}}var Se=xe,Pe=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var r=o(Oe),n=o(Se);function o(e){return e&&e.__esModule?e:{default:e}}var i=r.default.isUnitlessNumber,a={};t.default=function(e,t,r){if(null==t||"boolean"==typeof t||""===t)return"";if(isNaN(t)||0===t||i.hasOwnProperty(e)&&i[e])return""+t;if("string"==typeof t){if("production"!==process.env.NODE_ENV&&r&&"0"!==t){var o=r._currentElement._owner,u=o?o.getName():null;u&&!a[u]&&(a[u]={});var s=!1;if(u){var c=a[u];(s=c[e])||(c[e]=!0)}s||"production"!==process.env.NODE_ENV&&(0,n.default)(!1,"a `%s` tag (owner: `%s`) was passed a numeric string value for CSS property `%s` (value: `%s`) which will be treated as a unitless number in a future version of React.",r._currentElement.type,u||"unknown",e,t)}t=t.trim()}return t+"px"}}));y(Pe);var Me=/([A-Z])/g;var Ce=function(e){return e.replace(Me,"-$1").toLowerCase()},Ae=/^ms-/;var Te=function(e){return Ce(e).replace(Ae,"-ms-")};var Ne=function(e){var t={};return function(r){return t.hasOwnProperty(r)||(t[r]=e.call(this,r)),t[r]}},Re=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.processStyleName=void 0,t.createMarkupForStyles=function(e,t){var r="";for(var o in e){var i=0===o.indexOf("--");if(e.hasOwnProperty(o)&&"label"!==o){var a=e[o];"production"===process.env.NODE_ENV||i||h(o,a,t),null!=a&&(i?r+=o+":"+a+";":(r+=s(o)+":",r+=(0,n.default)(o,a,t)+";"))}}return r||null};var r=u(je),n=u(Pe),o=u(Te),i=u(Ne),a=u(Se);function u(e){return e&&e.__esModule?e:{default:e}}var s=t.processStyleName=(0,i.default)(o.default);if("production"!==process.env.NODE_ENV)var c=/^(?:webkit|moz|o)[A-Z]/,l=/;\s*$/,f={},p={},d=!1,m=function(e){if(e){var t=e.getName();if(t)return" Check the render method of `"+t+"`."}return""},h=function(e,t,n){var o=void 0;n&&(o=n._currentElement._owner),e.indexOf("-")>-1?function(e,t){f.hasOwnProperty(e)&&f[e]||(f[e]=!0,"production"!==process.env.NODE_ENV&&(0,a.default)(!1,"Unsupported style property %s. Did you mean %s?%s",e,(0,r.default)(e),m(t)))}(e,o):c.test(e)?function(e,t){f.hasOwnProperty(e)&&f[e]||(f[e]=!0,"production"!==process.env.NODE_ENV&&(0,a.default)(!1,"Unsupported vendor-prefixed style property %s. Did you mean %s?%s",e,e.charAt(0).toUpperCase()+e.slice(1),m(t)))}(e,o):l.test(t)&&function(e,t,r){p.hasOwnProperty(t)&&p[t]||(p[t]=!0,"production"!==process.env.NODE_ENV&&(0,a.default)(!1,'Style property values shouldn\'t contain a semicolon.%s Try "%s: %s" instead.',m(r),e,t.replace(l,"")))}(e,t,o),"number"==typeof t&&isNaN(t)&&function(e,t,r){d||(d=!0,"production"!==process.env.NODE_ENV&&(0,a.default)(!1,"`NaN` is an invalid value for the `%s` css style property.%s",e,m(r)))}(e,0,o)}}));y(Re);Re.processStyleName,Re.createMarkupForStyles;var He=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};function n(e){if(function(e){return null==e||!1===e||"object"===(void 0===e?"undefined":r(e))&&0===Object.keys(e).length}(e))return null;if("object"!==(void 0===e?"undefined":r(e)))return e;for(var t={},n=Object.keys(e),i=!1,a=0;a<n.length;a++){var u=e[n[a]],s=o(u);null!==s&&s===u||(i=!0),null!==s&&(t[n[a]]=s)}return 0===Object.keys(t).length?null:i?t:e}function o(e){return Array.isArray(e)?(r=!1,i=[],(t=e).forEach((function(e){var t=o(e);null!==t&&t===e||(r=!0),null!==t&&i.push(t)})),0==i.length?null:r?i:t):n(e);var t,r,i}t.default=o}));y(He);var ze=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var r=["Webkit"],n=["Moz"],o=["ms"],i=["Webkit","Moz"],a=["Webkit","ms"],u=["Webkit","Moz","ms"];t.default={plugins:[],prefixMap:{appearance:i,userSelect:u,textEmphasisPosition:r,textEmphasis:r,textEmphasisStyle:r,textEmphasisColor:r,boxDecorationBreak:r,clipPath:r,maskImage:r,maskMode:r,maskRepeat:r,maskPosition:r,maskClip:r,maskOrigin:r,maskSize:r,maskComposite:r,mask:r,maskBorderSource:r,maskBorderMode:r,maskBorderSlice:r,maskBorderWidth:r,maskBorderOutset:r,maskBorderRepeat:r,maskBorder:r,maskType:r,textDecorationStyle:r,textDecorationSkip:r,textDecorationLine:r,textDecorationColor:r,filter:r,fontFeatureSettings:r,breakAfter:u,breakBefore:u,breakInside:u,columnCount:i,columnFill:i,columnGap:i,columnRule:i,columnRuleColor:i,columnRuleStyle:i,columnRuleWidth:i,columns:i,columnSpan:i,columnWidth:i,writingMode:a,flex:r,flexBasis:r,flexDirection:r,flexGrow:r,flexFlow:r,flexShrink:r,flexWrap:r,alignContent:r,alignItems:r,alignSelf:r,justifyContent:r,order:r,transform:r,transformOrigin:r,transformOriginX:r,transformOriginY:r,backfaceVisibility:r,perspective:r,perspectiveOrigin:r,transformStyle:r,transformOriginZ:r,animation:r,animationDelay:r,animationDirection:r,animationFillMode:r,animationDuration:r,animationIterationCount:r,animationName:r,animationPlayState:r,animationTimingFunction:r,backdropFilter:r,fontKerning:r,scrollSnapType:a,scrollSnapPointsX:a,scrollSnapPointsY:a,scrollSnapDestination:a,scrollSnapCoordinate:a,shapeImageThreshold:r,shapeImageMargin:r,shapeImageOutside:r,hyphens:u,flowInto:a,flowFrom:a,regionFragment:a,textAlignLast:n,tabSize:n,wrapFlow:o,wrapThrough:o,wrapMargin:o,gridTemplateColumns:o,gridTemplateRows:o,gridTemplateAreas:o,gridTemplate:o,gridAutoColumns:o,gridAutoRows:o,gridAutoFlow:o,grid:o,gridRowStart:o,gridColumnStart:o,gridRowEnd:o,gridRow:o,gridColumn:o,gridColumnEnd:o,gridColumnGap:o,gridRowGap:o,gridArea:o,gridGap:o,textSizeAdjust:a,borderImage:r,borderImageOutset:r,borderImageRepeat:r,borderImageSlice:r,borderImageSource:r,borderImageWidth:r,transitionDelay:r,transitionDuration:r,transitionProperty:r,transitionTimingFunction:r}},e.exports=t.default}));y(ze);var Ie=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return e.charAt(0).toUpperCase()+e.slice(1)},e.exports=t.default}));y(Ie);var Be=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,r){if(e.hasOwnProperty(t))for(var o=e[t],i=0,a=o.length;i<a;++i)r[o[i]+(0,n.default)(t)]=r[t]};var r,n=(r=Ie)&&r.__esModule?r:{default:r};e.exports=t.default}));y(Be);var De=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,r,n,o){for(var i=0,a=e.length;i<a;++i){var u=e[i](t,r,n,o);if(u)return u}},e.exports=t.default}));y(De);var Le=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("cursor"===e&&n.hasOwnProperty(t))return r.map((function(e){return e+t}))};var r=["-webkit-","-moz-",""],n={"zoom-in":!0,"zoom-out":!0,grab:!0,grabbing:!0};e.exports=t.default}));y(Le);var We=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return"string"==typeof e&&r.test(e)};var r=/-webkit-|-moz-|-ms-/;e.exports=t.default}));y(We);var Fe=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("string"==typeof t&&!(0,n.default)(t)&&t.indexOf("cross-fade(")>-1)return o.map((function(e){return t.replace(/cross-fade\(/g,e+"cross-fade(")}))};var r,n=(r=We)&&r.__esModule?r:{default:r};var o=["-webkit-",""];e.exports=t.default}));y(Fe);var Ve=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("string"==typeof t&&!(0,n.default)(t)&&t.indexOf("filter(")>-1)return o.map((function(e){return t.replace(/filter\(/g,e+"filter(")}))};var r,n=(r=We)&&r.__esModule?r:{default:r};var o=["-webkit-",""];e.exports=t.default}));y(Ve);var qe=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("display"===e&&r.hasOwnProperty(t))return r[t]};var r={flex:["-webkit-box","-moz-box","-ms-flexbox","-webkit-flex","flex"],"inline-flex":["-webkit-inline-box","-moz-inline-box","-ms-inline-flexbox","-webkit-inline-flex","inline-flex"]};e.exports=t.default}));y(qe);var Ue=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,o){"flexDirection"===e&&"string"==typeof t&&(t.indexOf("column")>-1?o.WebkitBoxOrient="vertical":o.WebkitBoxOrient="horizontal",t.indexOf("reverse")>-1?o.WebkitBoxDirection="reverse":o.WebkitBoxDirection="normal");n.hasOwnProperty(e)&&(o[n[e]]=r[t]||t)};var r={"space-around":"justify","space-between":"justify","flex-start":"start","flex-end":"end","wrap-reverse":"multiple",wrap:"multiple"},n={alignItems:"WebkitBoxAlign",justifyContent:"WebkitBoxPack",flexWrap:"WebkitBoxLines"};e.exports=t.default}));y(Ue);var $e=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("string"==typeof t&&!(0,n.default)(t)&&i.test(t))return o.map((function(e){return e+t}))};var r,n=(r=We)&&r.__esModule?r:{default:r};var o=["-webkit-","-moz-",""],i=/linear-gradient|radial-gradient|repeating-linear-gradient|repeating-radial-gradient/;e.exports=t.default}));y($e);var Ge=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("string"==typeof t&&!(0,n.default)(t)&&t.indexOf("image-set(")>-1)return o.map((function(e){return t.replace(/image-set\(/g,e+"image-set(")}))};var r,n=(r=We)&&r.__esModule?r:{default:r};var o=["-webkit-",""];e.exports=t.default}));y(Ge);var Ye=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("position"===e&&"sticky"===t)return["-webkit-sticky","sticky"]},e.exports=t.default}));y(Ye);var Ze=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if(n.hasOwnProperty(e)&&o.hasOwnProperty(t))return r.map((function(e){return e+t}))};var r=["-webkit-","-moz-",""],n={maxHeight:!0,maxWidth:!0,width:!0,height:!0,columnWidth:!0,minWidth:!0,minHeight:!0},o={"min-content":!0,"max-content":!0,"fill-available":!0,"fit-content":!0,"contain-floats":!0};e.exports=t.default}));y(Ze);var Xe=/[A-Z]/g,Je=/^ms-/,Ke={};function Qe(e){return"-"+e.toLowerCase()}function et(e){if(Ke.hasOwnProperty(e))return Ke[e];var t=e.replace(Xe,Qe);return Ke[e]=Je.test(t)?"-"+t:t}var tt=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return(0,n.default)(e)};var r,n=(r=et)&&r.__esModule?r:{default:r};e.exports=t.default}));y(tt);var rt=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,i,s){if("string"==typeof t&&a.hasOwnProperty(e)){var c=function(e,t){if((0,n.default)(e))return e;for(var o=e.split(/,(?![^()]*(?:\([^()]*\))?\))/g),i=0,a=o.length;i<a;++i){var s=o[i],c=[s];for(var l in t){var f=(0,r.default)(l);if(s.indexOf(f)>-1&&"order"!==f)for(var p=t[l],d=0,m=p.length;d<m;++d)c.unshift(s.replace(f,u[p[d]]+f))}o[i]=c.join(",")}return o.join(",")}(t,s),l=c.split(/,(?![^()]*(?:\([^()]*\))?\))/g).filter((function(e){return!/-moz-|-ms-/.test(e)})).join(",");if(e.indexOf("Webkit")>-1)return l;var f=c.split(/,(?![^()]*(?:\([^()]*\))?\))/g).filter((function(e){return!/-webkit-|-ms-/.test(e)})).join(",");return e.indexOf("Moz")>-1?f:(i["Webkit"+(0,o.default)(e)]=l,i["Moz"+(0,o.default)(e)]=f,c)}};var r=i(tt),n=i(We),o=i(Ie);function i(e){return e&&e.__esModule?e:{default:e}}var a={transition:!0,transitionProperty:!0,WebkitTransition:!0,WebkitTransitionProperty:!0,MozTransition:!0,MozTransitionProperty:!0},u={Webkit:"-webkit-",Moz:"-moz-",ms:"-ms-"};e.exports=t.default}));y(rt);var nt=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){for(var t in e){var r=e[t],i=(0,o.default)(y,t,r,e,v);i&&(e[t]=i),(0,n.default)(v,t,e)}return e};var r=h(ze),n=h(Be),o=h(De),i=h(Le),a=h(Fe),u=h(Ve),s=h(qe),c=h(Ue),l=h($e),f=h(Ge),p=h(Ye),d=h(Ze),m=h(rt);function h(e){return e&&e.__esModule?e:{default:e}}var y=[a.default,i.default,u.default,c.default,l.default,f.default,p.default,d.default,m.default,s.default],v=r.default.prefixMap}));y(nt);var ot=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e};t.PluginSet=s,t.fallbacks=function(e){if(Object.keys(e.style).map((function(t){return Array.isArray(e.style[t])})).indexOf(!0)>=0){var t=e.style,r=Object.keys(t).reduce((function(e,r){return e[r]=Array.isArray(t[r])?t[r].join("; "+(0,Re.processStyleName)(r)+": "):t[r],e}),{});return(0,n.default)({},e,{style:r})}return e},t.contentWrap=function(e){if(e.style.content){var t=e.style.content;return c.indexOf(t)>=0||/^(attr|calc|counters?|url)\(/.test(t)?e:t.charAt(0)!==t.charAt(t.length-1)||'"'!==t.charAt(0)&&"'"!==t.charAt(0)?r({},e,{style:r({},e.style,{content:'"'+t+'"'})}):e}return e},t.prefixes=function(e){return(0,n.default)({},e,{style:(0,o.default)(r({},e.style))})};var n=i(ye),o=i(nt);function i(e){return e&&e.__esModule?e:{default:e}}var a,u="development"===(a=process.env.NODE_ENV)||!a;function s(e){this.fns=e||[]}(0,n.default)(s.prototype,{add:function(){for(var e=this,t=arguments.length,r=Array(t),n=0;n<t;n++)r[n]=arguments[n];r.forEach((function(t){e.fns.indexOf(t)>=0?u&&console.warn("adding the same plugin again, ignoring"):e.fns=[t].concat(e.fns)}))},remove:function(e){this.fns=this.fns.filter((function(t){return t!==e}))},clear:function(){this.fns=[]},transform:function(e){return this.fns.reduce((function(e,t){return t(e)}),e)}});var c=["normal","none","counter","open-quote","close-quote","no-open-quote","no-close-quote","initial","inherit"]}));y(ot);ot.PluginSet,ot.fallbacks,ot.contentWrap,ot.prefixes;var it=v((function(e,t){function r(e,t){return e.charCodeAt(t++)+(e.charCodeAt(t++)<<8)+(e.charCodeAt(t++)<<16)+(e.charCodeAt(t)<<24)}function n(e,t){return e.charCodeAt(t++)+(e.charCodeAt(t++)<<8)}function o(e,t){return(65535&(e|=0))*(t|=0)+(((e>>>16)*t&65535)<<16)|0}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var i=1540483477,a=t^e.length,u=e.length,s=0;for(;u>=4;){var c=r(e,s);c=o(c,i),c=o(c^=c>>>24,i),a=o(a,i),a^=c,s+=4,u-=4}switch(u){case 3:a^=n(e,s),a=o(a^=e.charCodeAt(s+2)<<16,i);break;case 2:a=o(a^=n(e,s),i);break;case 1:a=o(a^=e.charCodeAt(s),i)}return a=o(a^=a>>>13,i),(a^=a>>>15)>>>0}}));y(it);var at=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.compose=t.merge=t.$=t.style=t.presets=t.keyframes=t.fontFace=t.insertGlobal=t.insertRule=t.plugins=t.styleSheet=void 0,t.speedy=function(e){return u.speedy(e)},t.simulations=function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];p=!!e},t.simulate=function(){for(var e=arguments.length,t=Array(e),r=0;r<e;r++)t[r]=arguments[r];if(!(t=(0,n.default)(t)))return{};if(!p)return d||(console.warn("can't simulate without once calling simulations(true)"),d=!0),c||l||m||(console.warn("don't use simulation outside dev"),m=!0),{};return t.reduce((function(e,t){return e["data-simulate-"+y(t)]="",e}),{})},t.cssLabels=function(e){h=!!e},t.isLikeRule=b,t.idFor=g,t.css=W,t.rehydrate=function(e){(0,r.default)(E,e.reduce((function(e,t){return e[t]=!0,e}),{}))},t.flush=function(){E=u.inserted={},S=u.registered={},M={},u.flush(),u.inject()},t.select=V,t.parent=function(e){for(var t=arguments.length,r=Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];return W(a({},e+" &",r))},t.media=function(e){for(var t=arguments.length,r=Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];return W(a({},"@media "+e,r))},t.pseudo=q,t.active=function(e){return q(":active",e)},t.any=function(e){return q(":any",e)},t.checked=function(e){return q(":checked",e)},t.disabled=function(e){return q(":disabled",e)},t.empty=function(e){return q(":empty",e)},t.enabled=function(e){return q(":enabled",e)},t._default=function(e){return q(":default",e)},t.first=function(e){return q(":first",e)},t.firstChild=function(e){return q(":first-child",e)},t.firstOfType=function(e){return q(":first-of-type",e)},t.fullscreen=function(e){return q(":fullscreen",e)},t.focus=function(e){return q(":focus",e)},t.hover=function(e){return q(":hover",e)},t.indeterminate=function(e){return q(":indeterminate",e)},t.inRange=function(e){return q(":in-range",e)},t.invalid=function(e){return q(":invalid",e)},t.lastChild=function(e){return q(":last-child",e)},t.lastOfType=function(e){return q(":last-of-type",e)},t.left=function(e){return q(":left",e)},t.link=function(e){return q(":link",e)},t.onlyChild=function(e){return q(":only-child",e)},t.onlyOfType=function(e){return q(":only-of-type",e)},t.optional=function(e){return q(":optional",e)},t.outOfRange=function(e){return q(":out-of-range",e)},t.readOnly=function(e){return q(":read-only",e)},t.readWrite=function(e){return q(":read-write",e)},t.required=function(e){return q(":required",e)},t.right=function(e){return q(":right",e)},t.root=function(e){return q(":root",e)},t.scope=function(e){return q(":scope",e)},t.target=function(e){return q(":target",e)},t.valid=function(e){return q(":valid",e)},t.visited=function(e){return q(":visited",e)},t.dir=function(e,t){return q(":dir("+e+")",t)},t.lang=function(e,t){return q(":lang("+e+")",t)},t.not=function(e,t){var r=e.split(",").map((function(e){return e.trim()})).map((function(e){return":not("+e+")"}));if(1===r.length)return q(":not("+e+")",t);return V(r.join(""),t)},t.nthChild=function(e,t){return q(":nth-child("+e+")",t)},t.nthLastChild=function(e,t){return q(":nth-last-child("+e+")",t)},t.nthLastOfType=function(e,t){return q(":nth-last-of-type("+e+")",t)},t.nthOfType=function(e,t){return q(":nth-of-type("+e+")",t)},t.after=function(e){return q("::after",e)},t.before=function(e){return q("::before",e)},t.firstLetter=function(e){return q("::first-letter",e)},t.firstLine=function(e){return q("::first-line",e)},t.selection=function(e){return q("::selection",e)},t.backdrop=function(e){return q("::backdrop",e)},t.placeholder=function(e){return W({"::placeholder":e})},t.cssFor=function(){for(var e=arguments.length,t=Array(e),r=0;r<e;r++)t[r]=arguments[r];return(t=(0,n.default)(t))?t.map((function(e){var t={label:[]};return R(t,{src:e}),x(v(t),k(t)).join("")})).join(""):""},t.attribsFor=function(){for(var e=arguments.length,t=Array(e),r=0;r<e;r++)t[r]=arguments[r];var o=(t=(0,n.default)(t))?t.map((function(e){g(e);var t=Object.keys(e)[0];return t+'="'+(e[t]||"")+'"'})).join(" "):"";return o};var r=i(ye),n=i(He),o=i(it);function i(e){return e&&e.__esModule?e:{default:e}}function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var u=t.styleSheet=new ve.StyleSheet;u.inject();var s=t.plugins=u.plugins=new ot.PluginSet([ot.prefixes,ot.contentWrap,ot.fallbacks]);s.media=new ot.PluginSet,s.fontFace=new ot.PluginSet,s.keyframes=new ot.PluginSet([ot.prefixes,ot.fallbacks]);var c="development"===process.env.NODE_ENV||!process.env.NODE_ENV,l="test"===process.env.NODE_ENV,f="undefined"!=typeof window,p=c,d=!1,m=!1;var h=c;function y(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return e.toLowerCase().replace(/[^a-z0-9]/g,t)}function v(e){var t=JSON.stringify(e),r=(0,o.default)(t).toString(36);return e.label&&e.label.length>0&&c?y(e.label.join("."),"-")+"-"+r:r}function b(e){var t=Object.keys(e).filter((function(e){return"toString"!==e}));return 1===t.length&&!!/data\-css\-([a-zA-Z0-9\-_]+)/.exec(t[0])}function g(e){var t=Object.keys(e).filter((function(e){return"toString"!==e}));if(1!==t.length)throw new Error("not a rule");var r=/data\-css\-([a-zA-Z0-9\-_]+)/.exec(t[0]);if(!r)throw new Error("not a rule");return r[1]}var w=/[(),]|"(?:\\.|[^"\n])*"|'(?:\\.|[^'\n])*'|\/\*[\s\S]*?\*\//g;function j(e){if(-1===e.indexOf(","))return[e];for(var t,r=[],n=[],o=0;t=w.exec(e);)switch(t[0]){case"(":o++;break;case")":o--;break;case",":if(o)break;r.push(t.index)}for(t=r.length;t--;)n.unshift(e.slice(r[t]+1)),e=e.slice(0,r[t]);return n.unshift(e),n}function O(e,t){if(!e)return t.replace(/\&/g,"");if(!t)return".css-"+e+",[data-css-"+e+"]";var r=j(t).map((function(t){return t.indexOf("&")>=0?[t.replace(/\&/gm,".css-"+e),t.replace(/\&/gm,"[data-css-"+e+"]")].join(","):".css-"+e+t+",[data-css-"+e+"]"+t})).join(",");return p&&/^\&\:/.exec(t)&&!/\s/.exec(t)&&(r+=",.css-"+e+"[data-simulate-"+y(t)+"],[data-css-"+e+"][data-simulate-"+y(t)+"]"),r}function _(e){var t=e.selector,r=e.style,n=s.transform({selector:t,style:r});return n.selector+"{"+(0,Re.createMarkupForStyles)(n.style)+"}"}function k(e){var t=void 0,r=void 0,n=void 0,o=void 0;return Object.keys(e).forEach((function(i){i.indexOf("&")>=0?(r=r||{})[i]=e[i]:0===i.indexOf("@media")?(n=n||{})[i]=k(e[i]):0===i.indexOf("@supports")?(o=o||{})[i]=k(e[i]):"label"===i?e.label.length>0&&((t=t||{}).label=h?e.label.join("."):""):(t=t||{})[i]=e[i]})),{plain:t,selects:r,medias:n,supports:o}}function x(e,t){var r=[],n=t.plain,o=t.selects,i=t.medias,a=t.supports;return n&&r.push(_({style:n,selector:O(e)})),o&&Object.keys(o).forEach((function(t){return r.push(_({style:o[t],selector:O(e,t)}))})),i&&Object.keys(i).forEach((function(t){return r.push(t+"{"+x(e,i[t]).join("")+"}")})),a&&Object.keys(a).forEach((function(t){return r.push(t+"{"+x(e,a[t]).join("")+"}")})),r}var E=u.inserted={};var S=u.registered={};function P(e){S[e.id]||(S[e.id]=e)}var M={};function C(e){if(P(e),function(e){if(!E[e.id]){E[e.id]=!0;var t=k(e.style),r=x(e.id,t);E[e.id]=!!f||r,r.forEach((function(e){return u.insert(e)}))}}(e),M[e.id])return M[e.id];var t=a({},"data-css-"+e.id,h&&e.label||"");return Object.defineProperty(t,"toString",{enumerable:!1,value:function(){return"css-"+e.id}}),M[e.id]=t,t}function A(e,t){var r=j(e).map((function(e){return e.indexOf("&")>=0?e:"&"+e}));return j(t).map((function(e){return e.indexOf("&")>=0?e:"&"+e})).reduce((function(e,t){return e.concat(r.map((function(e){return t.replace(/\&/g,e)})))}),[]).join(",")}function T(e,t){return e?"@supports "+e.substring(9)+" and "+t.substring(9):t}var N={"::placeholder":["::-webkit-input-placeholder","::-moz-placeholder","::-ms-input-placeholder"],":fullscreen":[":-webkit-full-screen",":-moz-full-screen",":-ms-fullscreen"]};function R(e,t){var r=t.selector,o=void 0===r?"":r,i=t.mq,a=void 0===i?"":i,u=t.supp,s=void 0===u?"":u,c=t.src,l=void 0===c?{}:c;Array.isArray(l)||(l=[l]),(l=function e(t){for(var r=[],n=0;n<t.length;n++)r=Array.isArray(t[n])?r.concat(e(t[n])):r.concat(t[n]);return r}(l)).forEach((function(t){if(b(t)){var r=function(e){if(b(e)){var t=S[g(e)];if(null==t)throw new Error("[glamor] an unexpected rule cache miss occurred. This is probably a sign of multiple glamor instances in your app. See https://github.com/threepointone/glamor/issues/79");return t}return e}(t);if("css"!==r.type)throw new Error("cannot merge this rule");t=r.style}(t=(0,n.default)(t))&&t.composes&&R(e,{selector:o,mq:a,supp:s,src:t.composes}),Object.keys(t||{}).forEach((function(r){if(function(e){for(var t=[":",".","[",">"," "],r=!1,n=e.charAt(0),o=0;o<t.length;o++)if(n===t[o]){r=!0;break}return r||e.indexOf("&")>=0}(r))N[r]&&N[r].forEach((function(n){return R(e,{selector:A(o,n),mq:a,supp:s,src:t[r]})})),R(e,{selector:A(o,r),mq:a,supp:s,src:t[r]});else if(function(e){return 0===e.indexOf("@media")}(r))R(e,{selector:o,mq:(i=a,u=r,i?"@media "+i.substring(6)+" and "+u.substring(6):u),supp:s,src:t[r]});else if(function(e){return 0===e.indexOf("@supports")}(r))R(e,{selector:o,mq:a,supp:T(s,r),src:t[r]});else if("composes"===r);else{var n=e;s&&(n[s]=n[s]||{},n=n[s]),a&&(n[a]=n[a]||{},n=n[a]),o&&(n[o]=n[o]||{},n=n[o]),"label"===r?h&&(e.label=e.label.concat(t.label)):n[r]=t[r]}var i,u}))}))}function H(e){var t={label:[]};return R(t,{src:e}),C({id:v(t),style:t,label:h?t.label.join("."):"",type:"css"})}var z={};Object.defineProperty(z,"toString",{enumerable:!1,value:function(){return"css-nil"}});var I="undefined"!=typeof WeakMap?[z,new WeakMap,new WeakMap,new WeakMap]:[z],B=!1;var D,L="undefined"!=typeof WeakMap?(D=H,function(e){if(I[e.length]){for(var t=I[e.length],r=0;r<e.length-1;)t.has(e[r])||t.set(e[r],new WeakMap),t=t.get(e[r]),r++;if(t.has(e[e.length-1])){var n=t.get(e[r]);if(S[n.toString().substring(4)])return n}}var o=D(e);if(I[e.length]){for(var i=0,a=I[e.length];i<e.length-1;)a=a.get(e[i]),i++;try{a.set(e[i],o)}catch(t){var u;c&&!B&&(B=!0,(u=console).warn.apply(u,["failed setting the WeakMap cache for args:"].concat(function(e){if(Array.isArray(e)){for(var t=0,r=Array(e.length);t<e.length;t++)r[t]=e[t];return r}return Array.from(e)}(e))),console.warn("this should NOT happen, please file a bug on the github repo."))}}return o}):H;function W(){for(var e=arguments.length,t=Array(e),r=0;r<e;r++)t[r]=arguments[r];if(t[0]&&t[0].length&&t[0].raw)throw new Error("you forgot to include glamor/babel in your babel plugins.");return(t=(0,n.default)(t))?L(t):z}W.insert=function(e){var t={id:v(e),css:e,type:"raw"};P(t),E[t.id]||(u.insert(t.css),E[t.id]=!!f||[t.css])};t.insertRule=W.insert;W.global=function(e,t){if(t=(0,n.default)(t))return W.insert(_({selector:e,style:t}))};t.insertGlobal=W.global;W.keyframes=function(e,t){t||(t=e,e="animation");var r={id:v({name:e,kfs:t=(0,n.default)(t)||{}}),type:"keyframes",name:e,keyframes:t};return P(r),function(e){if(!E[e.id]){var t=Object.keys(e.keyframes).map((function(t){var r=s.keyframes.transform({id:e.id,name:t,style:e.keyframes[t]});return r.name+"{"+(0,Re.createMarkupForStyles)(r.style)+"}"})).join(""),r=["-webkit-","-moz-","-o-",""].map((function(r){return"@"+r+"keyframes "+e.name+"_"+e.id+"{"+t+"}"}));r.forEach((function(e){return u.insert(e)})),E[e.id]=!!f||r}}(r),e+"_"+r.id},W.fontFace=function(e){var t={id:v(e=(0,n.default)(e)),type:"font-face",font:e};return P(t),function(e){if(!E[e.id]){var t="@font-face{"+(0,Re.createMarkupForStyles)(e.font)+"}";u.insert(t),E[e.id]=!!f||[t]}}(t),e.fontFamily};t.fontFace=W.fontFace,t.keyframes=W.keyframes;t.presets={mobile:"(min-width: 400px)",Mobile:"@media (min-width: 400px)",phablet:"(min-width: 550px)",Phablet:"@media (min-width: 550px)",tablet:"(min-width: 750px)",Tablet:"@media (min-width: 750px)",desktop:"(min-width: 1000px)",Desktop:"@media (min-width: 1000px)",hd:"(min-width: 1200px)",Hd:"@media (min-width: 1200px)"};var F=t.style=W;function V(e){for(var t=arguments.length,r=Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];return e?W(a({},e,r)):F(r)}t.$=V;t.merge=W,t.compose=W;function q(e){for(var t=arguments.length,r=Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];return W(a({},e,r))}}));y(at);at.compose,at.merge,at.$,at.style,at.presets,at.keyframes,at.fontFace,at.insertGlobal,at.insertRule,at.plugins,at.styleSheet,at.speedy,at.simulations,at.simulate,at.cssLabels,at.isLikeRule,at.idFor;var ut=at.css,st=(at.rehydrate,at.flush,at.select,at.parent,at.media,at.pseudo,at.active,at.any,at.checked,at.disabled,at.empty,at.enabled,at._default,at.first,at.firstChild,at.firstOfType,at.fullscreen,at.focus,at.hover,at.indeterminate,at.inRange,at.invalid,at.lastChild,at.lastOfType,at.left,at.link,at.onlyChild,at.onlyOfType,at.optional,at.outOfRange,at.readOnly,at.readWrite,at.required,at.right,at.root,at.scope,at.target,at.valid,at.visited,at.dir,at.lang,at.not,at.nthChild,at.nthLastChild,at.nthLastOfType,at.nthOfType,at.after,at.before,at.firstLetter,at.firstLine,at.selection,at.backdrop,at.placeholder,at.cssFor,at.attribsFor,ut({height:"25px",width:"19px"})),ct=ut({width:"100%",background:"transparent",padding:"10px 15px",fontWeight:"700",color:"#eff",borderRadius:"5px",fontSize:".85em",borderBottom:"1px dashed #eee",":last-of-type":{borderBottom:0},":hover":{background:"#76e3dc",color:"#fff",cursor:"pointer"}});function lt(e){var t=e.item,r=e.itemClass,o=e.iconClass,i=e.getItem,a="function"==typeof i?i:function(){};return n.createElement("div",{className:"".concat(ct," ").concat(r),onClick:function(e){return a(t)}},n.createElement("img",{className:"".concat(st," ").concat(o),src:t.icon}),t.title)}lt.propTypes={item:r.object.isRequired,itemClass:r.string,iconClass:r.string,getItem:r.func};var ft=ut({bottom:"-52px",left:"15px",width:"400px",borderRadius:"5px",background:"#00afaa"}),pt=function(e){var t=e.containerClass,r=e.getItem,o=e.items,i=e.iconClass,a=e.itemClass;return n.createElement("div",{className:"".concat(ft," ").concat(t)},o.map((function(e){return n.createElement(lt,{iconClass:i,itemClass:a,getItem:r,item:e,key:e.title})})))};pt.propTypes={items:r.array.isRequired,itemClass:r.string,containerClass:r.string,iconClass:r.string,getItem:r.func};var dt=ut({paddingRight:"15px",paddingLeft:"15px",marginRight:"auto",marginLeft:"auto",position:"relative"}),mt=t.memo((function(e){var r=e.inputStyle,o=e.inputClassName,a=e.itemContainerClass,u=e.iconClass,s=e.itemClass,c=e.placeClassName,l=e.library,f=e.getItem,p=e.query,m=e.category,h=e.markerOptions,y=e.markerIcon,v=e.markerType,b=e.multiMarker,g=e.mapOptions,w=e.platform,j=d(t.useState(""),2),O=j[0],_=j[1],k=["search","categories","around","explore","here","suggest"].includes(l)?l:"search",x=d(t.useState([]),2),E=x[0],S=x[1],P=d(t.useState({q:O||p,cat:m}),2),M=P[0],C=P[1],A=d(t.useState(!1),2),T=A[0],N=A[1],R=d(t.useState(null),2),z=R[0],I=R[1],B=g||{};delete B.center;var L=d(t.useState({lat:37,lng:90}),2),W=L[0],F=L[1];navigator.geolocation?navigator.geolocation.getCurrentPosition((function(e){var t=e.coords,r=t.latitude,n=t.longitude,o={lat:r,lng:n},i=M;i.at="".concat(r,",").concat(n,";10000"),N(!b),C(i),F(o)})):console.log("Geolocation is not supported by this browser.");var q=function(e,t){if(!e||"api.here.com"!=e.A)throw new Error("Platform should be of Here Map's Platform");var r=e.getPlacesService();switch(t){case"around":return new H.places.Around(r);case"categories":return new H.places.Categories(r);case"explore":return new H.places.Explore(r);case"here":return new H.places.Here(r);case"lookup":return new H.places.Lookup(r);case"suggest":return new H.places.Suggest(r);case"search":default:return new H.places.Search(r)}}(w,k);return(M.q||M.cat)&&M.at&&q.request(M,{},(function(e){S(e.items||e.suggestions||e.results.items)}),(function(e){console.log(e)})),n.createElement("div",{className:"".concat(dt," ").concat(c)},n.createElement(fe,{className:o||"",style:r,getValue:function(e){_(e),C(i(i({},M),{},{q:e}))}}),!!E.length&&n.createElement(pt,{containerClass:a,iconClass:u,itemClass:s,getItem:function(e){var t="function"==typeof f?f:function(){};S([]),N(!b),F({lat:e.position[0],lng:e.position[1]}),t(e)},items:E}),!!W.lat&&n.createElement(D,{style:{height:"200px",width:"400px"},platform:w,options:e.options,mapOptions:i({center:W,zoom:7},B),interactive:!0},n.createElement(V,{coords:W,getMarker:function(e){I(e)},marker:z,icon:y,type:v,options:h,updateMarker:T})))}));mt.propTypes={library:r.string.isRequired,query:r.string,category:r.string,className:r.string,inputClassName:r.string,containerStyle:r.object,inputStyle:r.object,itemContainerClass:r.string,iconClass:r.string,itemClass:r.string,placeClassName:r.string,getItem:r.func,markerOptions:r.object,markerIcon:r.element,markerType:r.string,multiMarker:r.bool};var ht=W,yt=F,vt=V,bt=q,gt=U,wt=G,jt=Y,Ot=$,_t=mt,kt=D;e.HMap=kt,e.HMapCircle=bt,e.HMapGeoCode=Ot,e.HMapLayer=jt,e.HMapMarker=vt,e.HMapPlaces=_t,e.HMapPolyLine=ht,e.HMapPolygon=yt,e.HMapRectangle=gt,e.HMapRoute=wt,e.default=function(e){var r=d(t.useState({platform:{},options:{}}),2),o=r[0],i=r[1];t.useEffect((function(){M(e).then((function(e){var t=function(e){var t=e.app_id,r=e.app_code,n=e.apikey;if(!(t&&r||n))throw new Error("Options must include appId and appCode OR an apiKey");if("undefined"==typeof H||!H.service)throw new Error("Here Map JavaScripts is not loaded.");return new H.service.Platform(e)}(e);i({platform:t,options:e})}))}),[o.platform.A]);var a=o.platform,u=o.options;return"api.here.com"==a.A&&(u.app_code||u.apikey)?n.Children.map(e.children,(function(e){return n.cloneElement(e,{platform:a,options:u})})):null},Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
